name: Simple NGINX - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'simple-nginx/**'
      - '.github/workflows/simple-nginx-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'simple-nginx/**'
      - '.github/workflows/simple-nginx-ci.yml'

env:
  REGISTRY: docker.io
  IMAGE_NAME: gadhittana01/simple-nginx

jobs:
  lint:
    name: Lint Dockerfile
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Lint Dockerfile with Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: ./simple-nginx/Dockerfile
        format: tty
        failure-threshold: warning

  test:
    name: Test Application
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image
      uses: docker/build-push-action@v5
      with:
        context: ./simple-nginx
        load: true
        tags: simple-nginx:test
        build-args: |
          VERSION=${{ github.sha }}
          BUILD_TIME=${{ github.event.head_commit.timestamp }}

    - name: Test container startup
      run: |
        # Start container
        docker run -d --name nginx-test -p 8080:80 simple-nginx:test
        
        # Wait for container to be ready
        sleep 5
        
        # Test HTTP response
        curl -f http://localhost:8080 || exit 1
        
        # Check if our custom content is present
        if curl -s http://localhost:8080 | grep -q "Ini tampilan dari NGINX dan nama saya Giri"; then
          echo "‚úÖ Custom content found in response"
        else
          echo "‚ùå Custom content not found in response"
          exit 1
        fi
        
        # Cleanup
        docker stop nginx-test
        docker rm nginx-test

    - name: Test health check
      run: |
        # Start container
        docker run -d --name nginx-health-test simple-nginx:test
        
        # Wait for health check to pass
        timeout 60 bash -c 'until [ "$(docker inspect --format="{{.State.Health.Status}}" nginx-health-test)" == "healthy" ]; do sleep 2; done'
        
        echo "‚úÖ Health check passed"
        
        # Cleanup
        docker stop nginx-health-test
        docker rm nginx-health-test

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build image for scanning
      uses: docker/build-push-action@v5
      with:
        context: ./simple-nginx
        load: true
        tags: simple-nginx:scan
        build-args: |
          VERSION=${{ github.sha }}
          BUILD_TIME=${{ github.event.head_commit.timestamp }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'simple-nginx:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./simple-nginx
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ github.sha }}
          BUILD_TIME=${{ github.event.head_commit.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate build summary
      run: |
        echo "## üöÄ Simple NGINX Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Tags:** \`${{ steps.meta.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Build Time:** \`${{ github.event.head_commit.timestamp }}\`" >> $GITHUB_STEP_SUMMARY

  update-gitops:
    name: Update GitOps Repository
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request' && needs.build-and-push.result == 'success'
    
    steps:
    - name: Update GitOps Manifests
      run: |
        echo "üîÑ Updating GitOps repository for NGINX deployment..."
        
        # Configure git
        git config --global user.email "github-actions@github.com"
        git config --global user.name "GitHub Actions"
        
        # Clone GitOps repository
        git clone https://x-access-token:${{ secrets.GITOPS_REPO_TOKEN }}@github.com/${{ secrets.GITOPS_REPO_OWNER }}/gitops-argocd.git
        cd gitops-argocd
        
        # Update NGINX image tag in deployment file
        echo "üìù Updating NGINX image tag to ${{ github.sha }}"
        sed -i "s|image: .*/simple-nginx:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}|g" k8s/simple-nginx/deployment.yaml
        
        # Show the changes
        echo "üìã Changes to be committed:"
        git diff k8s/simple-nginx/deployment.yaml
        
        # Check if there are changes to commit
        if git diff --quiet; then
          echo "‚ö†Ô∏è No changes detected in deployment.yaml"
          exit 0
        fi
        
        # Commit and push changes
        git add k8s/simple-nginx/deployment.yaml
        git commit -m "üöÄ Update NGINX image to ${{ github.ref_name }}-${{ github.sha }} [skip ci]

        - Application: simple-nginx
        - Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}
        - Commit: ${{ github.sha }}
        - Triggered by: ${{ github.actor }}"
        
        git push origin main
        
        echo "‚úÖ GitOps repository updated successfully!"
        echo "üîÑ ArgoCD will automatically detect changes and sync the NGINX application."
        echo ""
        echo "üéØ Updated image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}"
